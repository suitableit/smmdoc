model User {
  id                    String                 @id @default(cuid())
  name                  String?
  password              String?
  email                 String?                @unique
  role                  Role                   @default(user)
  emailVerified         DateTime?
  image                 String?
  currency              String                 @default("USD")
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  dollarRate            Float                  @default(121.45)
  balance               Float                  @default(0)
  total_deposit         Float                  @default(0) @db.Float
  total_spent           Float                  @default(0) @db.Float
  username              String?                @unique
  accounts              Account?
  addFunds              AddFund[]
  apiKeys               ApiKey[]
  Category              Category[]
  favoriteServices      FavoriteService[]
  favouriteCat          FavrouteCat[]
  newOrders             NewOrder[]
  services              Service[]
  sessions              Session[]
  twoFactorConfirmation TwoFactorConfirmation?
  cancelRequests        CancelRequest[]
}

model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "ApiKey_userId_fkey")
}

enum Role {
  user
  admin
}
