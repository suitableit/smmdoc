model User {
  id                      Int                    @id @default(autoincrement())
  username                String?                @unique
  name                    String?
  password                String?
  email                   String?                @unique
  role                    Role                   @default(user)
  emailVerified           DateTime?
  image                   String?
  currency                String                 @default("USD")
  dollarRate              Float                  @default(121.45)
  balance                 Float                  @default(0)
  total_deposit           Float                  @default(0) @db.Float
  total_spent             Float                  @default(0) @db.Float
  servicesDiscount        Float                  @default(0)
  specialPricing          Boolean                @default(false)
  status                  String                 @default("active")
  apiKey                  String?                @unique
  isTwoFactorEnabled      Boolean                @default(false)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  lastLoginAt             DateTime?
  accounts                Account?
  addFunds                AddFund[]
  apiKeys                 ApiKey[]
  cancelRequests          CancelRequest[]
  Category                Category[]
  favoriteServices        FavoriteService[]
  favouriteCat            FavrouteCat[]
  newOrders               NewOrder[]
  processedRefillRequests RefillRequest[]        @relation("ProcessedRefillRequests")
  refillRequests          RefillRequest[]
  services                Service[]
  sessions                Session[]
  twoFactorConfirmation   TwoFactorConfirmation?
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  userId    Int
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "ApiKey_userId_fkey")
}

enum Role {
  user
  admin
}
