enum Role {
  user
  admin
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  password              String?
  email                 String?                @unique
  role                  Role                   @default(user)
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  sessions              Session[]
  apiKeys               ApiKey[]
  Category              Category[]
  services              Service[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
}
