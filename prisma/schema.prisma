generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id            Int              @id @default(autoincrement())
  category_name String
  status        String           @default("active")
  userId        Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  hideCategory  String           @default("no")
  position      CategoryPosition @default(bottom)
  user          user             @relation(fields: [userId], references: [id], onDelete: Cascade)
  newOrders     NewOrder[]
  services      Service[]

  @@index([position, createdAt], map: "Category_position_createdAt_idx")
  @@index([userId], map: "Category_userId_fkey")
  @@map("category")
}

model Service {
  id                  Int               @id @default(autoincrement())
  name                String
  rate                Float
  min_order           Int
  max_order           Int
  avg_time            String
  description         String            @db.Text
  updateText          String?           @db.Text
  userId              Int
  categoryId          Int
  favrouteCatId       Int?
  status              String            @default("active")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  perqty              Int               @default(1000)
  serviceTypeId       Int?
  cancel              Boolean           @default(false)
  mode                String            @default("manual")
  refill              Boolean           @default(false)
  refillDays          Int?              @default(30)
  serviceSpeed        String?           @default("medium")
  personalizedService Boolean?          @default(false)
  refillDisplay       Int?              @default(24)
  rateUSD             Float             @default(0)
  providerId          Int?
  providerName        String?
  favoriteServices    FavoriteService[]
  newOrders           NewOrder[]
  category            Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  favrouteCat         FavrouteCat?      @relation(fields: [favrouteCatId], references: [id], onDelete: Cascade)
  serviceType         servicetype?      @relation(fields: [serviceTypeId], references: [id])
  user                user              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([categoryId], map: "Service_categoryId_fkey")
  @@index([favrouteCatId], map: "Service_favrouteCatId_fkey")
  @@index([serviceTypeId], map: "Service_serviceTypeId_idx")
  @@index([status], map: "Service_status_idx")
  @@index([userId], map: "Service_userId_idx")
  @@map("service")
}

model NewOrder {
  id             Int             @id @default(autoincrement())
  categoryId     Int
  serviceId      Int
  userId         Int
  link           String
  qty            Int
  price          Float
  avg_time       String
  status         String          @default("pending")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  remains        Int             @default(0)
  startCount     Int             @default(0)
  bdtPrice       Float
  currency       String
  usdPrice       Float
  charge         Float           @default(0)
  profit         Float           @default(0)
  cancelRequests CancelRequest[]
  category       Category        @relation(fields: [categoryId], references: [id])
  service        Service         @relation(fields: [serviceId], references: [id])
  user           user            @relation(fields: [userId], references: [id])
  refillRequests RefillRequest[]

  @@index([categoryId], map: "NewOrder_categoryId_fkey")
  @@index([serviceId], map: "NewOrder_serviceId_fkey")
  @@index([userId], map: "NewOrder_userId_fkey")
  @@map("neworder")
}

model FavrouteCat {
  id        Int       @id @default(autoincrement())
  name      String
  userId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      user      @relation(fields: [userId], references: [id])
  services  Service[]

  @@index([userId], map: "FavrouteCat_userId_fkey")
  @@map("favroutecat")
}

model FavoriteService {
  id        Int      @id @default(autoincrement())
  userId    Int
  serviceId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceId], map: "FavoriteService_userId_serviceId_key")
  @@index([serviceId], map: "FavoriteService_serviceId_fkey")
  @@map("favoriteservice")
}

model CancelRequest {
  id           Int       @id @default(autoincrement())
  orderId      Int
  userId       Int
  reason       String
  status       String    @default("pending")
  refundAmount Float?
  adminNotes   String?
  processedBy  Int?
  processedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  order        NewOrder  @relation(fields: [orderId], references: [id])
  user         user      @relation(fields: [userId], references: [id])

  @@index([createdAt], map: "CancelRequest_createdAt_idx")
  @@index([orderId], map: "CancelRequest_orderId_fkey")
  @@index([status], map: "CancelRequest_status_idx")
  @@index([userId], map: "CancelRequest_userId_fkey")
  @@map("cancelrequest")
}

model RefillRequest {
  id                                   Int       @id @default(autoincrement())
  orderId                              Int
  userId                               Int
  reason                               String
  status                               String    @default("pending")
  adminNotes                           String?
  processedBy                          Int?
  processedAt                          DateTime?
  createdAt                            DateTime  @default(now())
  updatedAt                            DateTime  @updatedAt
  order                                NewOrder  @relation(fields: [orderId], references: [id])
  user_refillrequest_processedByTouser user?     @relation("refillrequest_processedByTouser", fields: [processedBy], references: [id])
  user                                 user      @relation(fields: [userId], references: [id])

  @@index([createdAt], map: "RefillRequest_createdAt_idx")
  @@index([orderId], map: "RefillRequest_orderId_idx")
  @@index([processedBy], map: "RefillRequest_processedBy_fkey")
  @@index([status], map: "RefillRequest_status_idx")
  @@index([userId], map: "RefillRequest_userId_idx")
  @@map("refillrequest")
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   Int      @unique(map: "Account_userId_key")
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  user                     user     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
  @@map("account")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "Session_userId_idx")
  @@map("session")
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "VerificationToken_token_key")
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token], map: "VerificationToken_email_token_key")
  @@map("verificationtoken")
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "PasswordResetToken_token_key")
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token], map: "PasswordResetToken_email_token_key")
  @@map("passwordresettoken")
}

model TwoFactorToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique(map: "TwoFactorToken_token_key")
  expires   DateTime
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, token], map: "TwoFactorToken_email_token_key")
  @@map("twofactortoken")
}

model TwoFactorConfirmation {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique(map: "TwoFactorConfirmation_userId_key")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twofactorconfirmation")
}

model ApiKey {
  id        Int      @id @default(autoincrement())
  userId    Int
  key       String   @unique(map: "ApiKey_key_key")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "ApiKey_userId_fkey")
  @@map("apikey")
}

model SupportTicket {
  id            Int       @id @default(autoincrement())
  userId        Int
  subject       String
  message       String    @db.Text
  status        String    @default("pending")
  category      String
  subcategory   String?
  orderIds      String?   @db.Text
  priority      String    @default("medium")
  attachments   String?   @db.Text
  adminReply    String?   @db.Text
  repliedAt     DateTime?
  repliedBy     Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  repliedByUser user?     @relation("RepliedByUser", fields: [repliedBy], references: [id])
  user          user      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([category])
  @@index([priority])
  @@index([createdAt])
  @@index([repliedBy], map: "support_tickets_repliedBy_fkey")
  @@map("support_tickets")
}

model ContactSettings {
  id                   Int               @id @default(autoincrement())
  contactSystemEnabled Boolean           @default(true)
  maxPendingContacts   String            @default("3")
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  categories           ContactCategory[]

  @@map("contact_settings")
}

model ContactCategory {
  id                Int             @id @default(autoincrement())
  name              String
  contactSettingsId Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  contactSettings   ContactSettings @relation(fields: [contactSettingsId], references: [id], onDelete: Cascade)

  @@index([contactSettingsId], map: "contact_categories_contactSettingsId_fkey")
  @@map("contact_categories")
}

model ContactMessage {
  id          Int       @id @default(autoincrement())
  userId      Int
  subject     String
  message     String    @db.Text
  status      String    @default("Unread")
  categoryId  Int
  attachments String?   @db.Text
  adminReply  String?   @db.Text
  repliedAt   DateTime?
  repliedBy   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt

  @@index([userId])
  @@index([categoryId])
  @@index([status])
  @@map("contact_messages")
}

model activitylog {
  id        Int      @id @default(autoincrement())
  userId    Int?
  username  String?
  action    String
  details   String   @db.Text
  ipAddress String?
  userAgent String?  @db.Text
  metadata  String?  @db.LongText
  createdAt DateTime @default(now())
  user      user?    @relation(fields: [userId], references: [id])

  @@index([action])
  @@index([createdAt])
  @@index([userId])
}

model addFund {
  id               Int                       @id @default(autoincrement())
  invoice_id       String                    @unique(map: "AddFund_invoice_id_key")
  amount           Float
  email            String
  name             String?
  status           String?                   @default("Processing")
  order_id         String?
  method           String?
  payment_method   String?
  sender_number    String?
  transaction_id   String?
  date             DateTime?
  paid_at          DateTime                  @default(now())
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @default(now()) @updatedAt
  userId           Int
  fee              Float?
  spent_amount     Float
  admin_status     String?                   @default("Pending")
  transaction_type addfund_transaction_type? @default(deposit)
  reference_id     String?                   @db.VarChar(255)
  currency         String?                   @default("BDT") @db.VarChar(3)
  original_amount  Float?
  user             user                      @relation(fields: [userId], references: [id])

  @@index([userId], map: "addfund_userId_fkey")
  @@map("addfund")
}

model affiliate_commissions {
  id               Int        @id @default(autoincrement())
  affiliateId      Int
  referredUserId   Int
  orderId          Int?
  amount           Float
  commissionRate   Float
  commissionAmount Float
  status           String     @default("pending")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime
  affiliates       affiliates @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId], map: "affiliate_commissions_affiliateId_fkey")
}

model affiliate_payouts {
  id          Int        @id @default(autoincrement())
  affiliateId Int
  amount      Float
  method      String
  details     String?    @db.LongText
  status      String     @default("pending")
  requestedAt DateTime   @default(now())
  processedAt DateTime?
  notes       String?
  adminId     Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  affiliates  affiliates @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId], map: "affiliate_payouts_affiliateId_fkey")
}

model affiliate_referrals {
  id             Int        @id @default(autoincrement())
  affiliateId    Int
  referredUserId Int        @unique
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime   @default(now())
  affiliates     affiliates @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  @@index([affiliateId], map: "affiliate_referrals_affiliateId_fkey")
}

model affiliates {
  id                    Int                     @id @default(autoincrement())
  userId                Int                     @unique
  referralCode          String                  @unique
  commissionRate        Float                   @default(5)
  totalEarnings         Float                   @default(0)
  availableEarnings     Float                   @default(0)
  totalReferrals        Int                     @default(0)
  totalVisits           Int                     @default(0)
  status                String                  @default("active")
  paymentMethod         String?
  paymentDetails        String?                 @db.LongText
  createdAt             DateTime                @default(now())
  updatedAt             DateTime
  affiliate_commissions affiliate_commissions[]
  affiliate_payouts     affiliate_payouts[]
  affiliate_referrals   affiliate_referrals[]
}

model apiProvider {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  api_key    String
  login_user String?
  login_pass String?
  status     String   @default("active")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  api_url    String   @default("")
  is_custom  Boolean  @default(false)

  @@index([name])
  @@index([status])
  @@map("api_providers")
}

model child_panel_subscriptions {
  id            Int          @id @default(autoincrement())
  childPanelId  Int
  amount        Float
  currency      String       @default("USD")
  status        String       @default("pending")
  startDate     DateTime     @default(now())
  endDate       DateTime
  paymentMethod String?
  transactionId String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime
  child_panels  child_panels @relation(fields: [childPanelId], references: [id], onDelete: Cascade)

  @@index([childPanelId], map: "child_panel_subscriptions_childPanelId_fkey")
}

model child_panels {
  id                        Int                         @id @default(autoincrement())
  userId                    Int                         @unique
  domain                    String                      @unique
  subdomain                 String?
  panelName                 String
  apiKey                    String                      @unique
  status                    String                      @default("pending")
  plan                      String                      @default("basic")
  theme                     String                      @default("default")
  customBranding            Boolean                     @default(false)
  totalOrders               Int                         @default(0)
  totalRevenue              Float                       @default(0)
  apiCallsToday             Int                         @default(0)
  apiCallsTotal             Int                         @default(0)
  lastActivity              DateTime?
  expiryDate                DateTime?
  settings                  String?                     @db.LongText
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime
  child_panel_subscriptions child_panel_subscriptions[]
}

model currency {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(3)
  name      String   @db.VarChar(100)
  symbol    String   @db.VarChar(10)
  rate      Decimal  @default(1.0000) @db.Decimal(10, 4)
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  
  @@map("currencies")
}

model currencySettings {
  id                 Int      @id @default(autoincrement())
  defaultCurrency    String   @default("USD")
  displayDecimals    Int      @default(2)
  currencyPosition   String   @default("left")
  thousandsSeparator String   @default(",")
  decimalSeparator   String   @default(".")
  createdAt          DateTime @default(now())
  updatedAt          DateTime
  
  @@map("currency_settings")
}

model moduleSettings {
  id                       Int      @id @default(autoincrement())
  affiliateSystemEnabled   Boolean  @default(false)
  commissionRate           Float    @default(5)
  minimumPayout            Float    @default(10)
  childPanelSellingEnabled Boolean  @default(false)
  childPanelPrice          Float    @default(10)
  serviceUpdateLogsEnabled Boolean  @default(true)
  massOrderEnabled         Boolean  @default(false)
  servicesListPublic       Boolean  @default(true)
  createdAt                DateTime @default(now())
  updatedAt                DateTime
  
  @@map("module_settings")
}

model service_update_logs {
  id          Int      @id @default(autoincrement())
  serviceId   Int
  serviceName String
  adminId     Int
  adminEmail  String
  action      String
  changes     String?  @db.LongText
  oldValues   String?  @db.LongText
  newValues   String?  @db.LongText
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
}

model servicetype {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "ServiceType_name_key")
  description String?
  status      String    @default("active")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  services    Service[]
}

model ticket_settings {
  id                  Int               @id @default(autoincrement())
  ticketSystemEnabled Boolean           @default(true)
  maxPendingTickets   String            @default("3")
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  ticket_subjects     ticket_subjects[]
}

model ticket_subjects {
  id               Int             @id @default(autoincrement())
  name             String
  ticketSettingsId Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  ticket_settings  ticket_settings @relation(fields: [ticketSettingsId], references: [id], onDelete: Cascade)

  @@index([ticketSettingsId], map: "ticket_subjects_ticketSettingsId_fkey")
}

model user {
  id                                            Int                    @id @default(autoincrement())
  username                                      String?                @unique(map: "User_username_key")
  name                                          String?
  password                                      String?
  email                                         String?                @unique(map: "User_email_key")
  role                                          user_role              @default(user)
  emailVerified                                 DateTime?
  image                                         String?
  currency                                      String                 @default("USD")
  dollarRate                                    Float                  @default(121.45)
  balance                                       Float                  @default(0)
  total_deposit                                 Float                  @default(0) @db.Float
  total_spent                                   Float                  @default(0) @db.Float
  servicesDiscount                              Float                  @default(0)
  specialPricing                                Boolean                @default(false)
  status                                        String                 @default("active")
  apiKey                                        String?                @unique(map: "User_apiKey_key")
  isTwoFactorEnabled                            Boolean                @default(false)
  createdAt                                     DateTime               @default(now())
  updatedAt                                     DateTime
  lastLoginAt                                   DateTime?
  balanceUSD                                    Float                  @default(0)
  preferredCurrency                             String                 @default("USD")
  language                                      String                 @default("en")
  timezone                                      String                 @default("Asia/Dhaka")
  accounts                                      Account?
  activitylog                                   activitylog[]
  addFund                                       addFund[]
  apiKeys                                       ApiKey[]
  cancelRequests                                CancelRequest[]
  Category                                      Category[]
  favoriteServices                              FavoriteService[]
  favouriteCat                                  FavrouteCat[]
  newOrders                                     NewOrder[]
  refillrequest_refillrequest_processedByTouser RefillRequest[]        @relation("refillrequest_processedByTouser")
  refillRequests                                RefillRequest[]
  services                                      Service[]
  sessions                                      Session[]
  repliedSupportTickets                         SupportTicket[]        @relation("RepliedByUser")
  supportTickets                                SupportTicket[]
  twoFactorConfirmation                         TwoFactorConfirmation?
}

model userSettings {
  id                       Int      @id @default(autoincrement())
  resetPasswordEnabled     Boolean  @default(true)
  signUpPageEnabled        Boolean  @default(true)
  nameFieldEnabled         Boolean  @default(true)
  emailConfirmationEnabled Boolean  @default(true)
  resetLinkMax             Int      @default(3)
  transferFundsPercentage  Int      @default(3)
  userFreeBalanceEnabled   Boolean  @default(false)
  freeAmount               Float    @default(0)
  paymentBonusEnabled      Boolean  @default(false)
  bonusPercentage          Float    @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime

  @@map("user_settings")
}

model CustomCodesSettings {
  id          Int      @id @default(autoincrement())
  headerCodes String?  @db.Text
  footerCodes String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("custom_codes_settings")
}

model IntegrationSettings {
  id                    Int      @id @default(autoincrement())
  // ReCAPTCHA Settings
  recaptchaEnabled      Boolean  @default(false)
  recaptchaVersion      String   @default("v3")
  // Legacy fields (deprecated but kept for migration)
  recaptchaSiteKey      String?  @db.Text
  recaptchaSecretKey    String?  @db.Text
  // Separate v2 and v3 fields
  recaptchaV2SiteKey    String?  @db.Text
  recaptchaV2SecretKey  String?  @db.Text
  recaptchaV3SiteKey    String?  @db.Text
  recaptchaV3SecretKey  String?  @db.Text
  recaptchaThreshold    Float    @default(0.5)
  recaptchaSignUp       Boolean  @default(false)
  recaptchaSignIn       Boolean  @default(false)
  recaptchaContact      Boolean  @default(false)
  recaptchaSupportTicket Boolean @default(false)
  recaptchaContactSupport Boolean @default(false)
  // Live Chat Settings
  liveChatEnabled       Boolean  @default(false)
  liveChatHoverTitle    String   @default("Chat with us")
  liveChatSocialEnabled Boolean  @default(false)
  liveChatMessengerEnabled Boolean @default(false)
  liveChatMessengerUrl  String?  @db.Text
  liveChatWhatsappEnabled Boolean @default(false)
  liveChatWhatsappNumber String?
  liveChatTelegramEnabled Boolean @default(false)
  liveChatTelegramUsername String?
  liveChatTawkToEnabled Boolean  @default(false)
  liveChatTawkToCode    String?  @db.Text
  liveChatVisibility    String   @default("all")
  // Analytics Settings
  analyticsEnabled      Boolean  @default(false)
  googleAnalyticsEnabled Boolean @default(false)
  googleAnalyticsCode   String?  @db.Text
  googleAnalyticsVisibility String @default("all")
  facebookPixelEnabled  Boolean  @default(false)
  facebookPixelCode     String?  @db.Text
  facebookPixelVisibility String @default("all")
  gtmEnabled            Boolean  @default(false)
  gtmCode               String?  @db.Text
  gtmVisibility         String   @default("all")
  // Notification Settings
  pushNotificationsEnabled Boolean @default(false)
  oneSignalCode         String?  @db.Text
  oneSignalVisibility   String   @default("all")
  emailNotificationsEnabled Boolean @default(false)
  // User Notifications
  userNotifWelcome      Boolean  @default(false)
  userNotifApiKeyChanged Boolean @default(false)
  userNotifOrderStatusChanged Boolean @default(false)
  userNotifNewService   Boolean  @default(false)
  userNotifServiceUpdates Boolean @default(false)
  // Admin Notifications
  adminNotifApiBalanceAlerts Boolean @default(false)
  adminNotifSupportTickets Boolean @default(false)
  adminNotifNewMessages Boolean @default(false)
  adminNotifNewManualServiceOrders Boolean @default(false)
  adminNotifFailOrders  Boolean  @default(false)
  adminNotifNewManualRefillRequests Boolean @default(false)
  adminNotifNewManualCancelRequests Boolean @default(false)
  adminNotifNewUsers    Boolean  @default(false)
  adminNotifUserActivityLogs Boolean @default(false)
  adminNotifPendingTransactions Boolean @default(false)
  adminNotifApiSyncLogs Boolean  @default(false)
  adminNotifNewChildPanelOrders Boolean @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("integration_settings")
}

enum CategoryPosition {
  top
  bottom
}

enum user_role {
  user
  admin
  moderator
}

enum addfund_transaction_type {
  deposit
  withdrawal
  purchase
  refund
}

