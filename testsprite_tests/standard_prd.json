{
  "meta": {
    "project": "SMMDOC Provider Order System Enhancement",
    "date": "2025-09-05",
    "prepared_by": "Software Development Manager"
  },
  "product_overview": "SMMDOC Provider Order System Enhancement is a comprehensive system that automates forwarding user orders to multiple external SMM providers, synchronizes order statuses, performs provider balance checks, and enables resubmission of failed orders. It ensures distinct user and admin experiences by filtering order statuses and provides robust API endpoints for seamless integration and admin control.",
  "core_goals": [
    "Automate order forwarding to external providers with real-time status updates.",
    "Separate order status visibility between users and admins for clarity and security.",
    "Implement provider balance checks to prevent failed orders due to insufficient balance.",
    "Enable admins to manually resubmit failed orders via UI and API.",
    "Provide dynamic provider management and service import from configurable external provider APIs.",
    "Maintain robust error handling, logging, and retry mechanisms for reliability.",
    "Ensure secure API authentication, authorization, and sensitive data protection."
  ],
  "key_features": [
    "Automatic forwarding of user orders to configured external providers with validation and balance check.",
    "Real-time order status synchronization via cron jobs and manual API triggers.",
    "Distinct order status presentation: users see filtered statuses ('pending' hides 'failed'), admins see full status including 'failed'.",
    "Admin interface enhancements including a 3-dot menu with 'Resubmit Order' for failed orders.",
    "Provider balance checking before order submission to prevent failures.",
    "Dynamic provider addition in admin panel with API configuration, validation, and service import.",
    "Comprehensive API endpoints for order creation, forwarding, status sync, resubmission, and provider management.",
    "Updated database schema with new columns for resubmission tracking, user/admin status views, and balance check statuses.",
    "UI improvements with status badges reflecting user/admin context and actionable controls for admins.",
    "Robust error handling with categorized errors, logging, and retry strategies."
  ],
  "user_flow_summary": [
    "User creates an order with selected category, service, link, and quantity.",
    "System validates user balance, service-provider association, and provider balance.",
    "If balance sufficient, order is forwarded to provider API and logged; else, marked as failed for admin only.",
    "User views their orders with filtered statuses showing 'pending' instead of 'failed'.",
    "Admin views full order statuses including failed orders and can manually resubmit orders if needed.",
    "Admin accesses provider management to add or configure providers dynamically and imports services.",
    "Periodic automatic synchronization updates order statuses from providers every 15 minutes via cron job.",
    "Admins can manually trigger order status synchronization or resubmit failed orders via UI or API."
  ],
  "validation_criteria": [
    "Successful order forwarding only if provider balance is sufficient.",
    "User only sees 'pending' status for failed or cancelled orders.",
    "Admin sees full status range including 'failed', with ability to resubmit orders.",
    "Resubmit API correctly updates order status and increments resubmit count.",
    "Provider balance check API returns accurate balance and status.",
    "Dynamic provider addition reflects immediately in import services dropdown.",
    "Error handling logs and retry mechanisms operate effectively during provider API failures.",
    "UI components respond correctly to status changes and show appropriate actions.",
    "All API endpoints protect data by authentication and role-based authorization.",
    "Database schema changes are correctly applied and referenced in code.",
    "Automated and manual status synchronization update order statuses as expected."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "Next.js 15 (App Router)",
      "React 19",
      "NextAuth.js 5 (beta)",
      "Prisma ORM 6",
      "MySQL (mysql2)",
      "TailwindCSS 3",
      "SWR",
      "Redux Toolkit"
    ],
    "features": [
      {
        "name": "Currencies: Enabled List",
        "description": "Return enabled currencies and related client settings used across the UI.",
        "files": [
          "app/api/currencies/enabled/route.ts",
          "data/currency-settings.json"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Currencies API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/currencies/enabled": {
              "get": {
                "summary": "Get enabled currencies",
                "responses": {
                  "200": {
                    "description": "Enabled currencies returned"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Public: Analytics Settings",
        "description": "Public endpoint serving analytics and custom codes settings for the frontend.",
        "files": [
          "app/api/public/analytics-settings/route.ts",
          "components/analytics-injector.tsx",
          "components/CustomCodesInjector.tsx"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Public Settings API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/public/analytics-settings": {
              "get": {
                "summary": "Get analytics settings",
                "responses": {
                  "200": {
                    "description": "Settings"
                  }
                }
              }
            },
            "/api/public/custom-codes": {
              "get": {
                "summary": "Get custom codes",
                "responses": {
                  "200": {
                    "description": "Codes"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Auth: Session & NextAuth Routes",
        "description": "Authentication with NextAuth (credentials/social), includes session introspection and logout.",
        "files": [
          "app/api/auth/[...nextauth]/route.ts",
          "app/api/auth/session/route.ts",
          "app/api/auth/logout/route.ts",
          "auth.ts",
          "auth.config.ts",
          "middleware.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Auth API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/auth/session": {
              "get": {
                "summary": "Get session",
                "responses": {
                  "200": {
                    "description": "Session info"
                  }
                }
              }
            },
            "/api/auth/logout": {
              "post": {
                "summary": "Logout current user",
                "responses": {
                  "200": {
                    "description": "Logged out"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Orders: Place To Provider",
        "description": "Forward new user orders to external providers and log provider order id/status.",
        "files": [
          "app/api/orders/place-to-provider/route.ts",
          "app/api/admin/providers/route.ts",
          "app/api/admin/provider-sync/route.ts",
          "app/api/cron/sync-provider-orders/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Orders Provider API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/orders/place-to-provider": {
              "post": {
                "summary": "Place order to provider",
                "requestBody": {
                  "required": true
                },
                "responses": {
                  "200": {
                    "description": "Placed"
                  },
                  "400": {
                    "description": "Validation error"
                  }
                }
              }
            },
            "/api/cron/sync-provider-orders": {
              "get": {
                "summary": "Cron sync status",
                "responses": {
                  "200": {
                    "description": "Synced"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Admin: Services & Providers",
        "description": "Admin CRUD for services and providers, bulk update, toggle features, and import pipeline.",
        "files": [
          "app/api/admin/services/route.ts",
          "app/api/admin/services/import/route.ts",
          "app/api/admin/providers/route.ts",
          "app/api/admin/providers/auto-sync/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Admin Services/Providers API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/admin/services": {
              "get": {
                "summary": "List services"
              }
            },
            "/api/admin/providers": {
              "get": {
                "summary": "List providers"
              },
              "post": {
                "summary": "Create provider"
              }
            }
          }
        }
      },
      {
        "name": "Payments: Create Charge & Verify",
        "description": "Payment creation and verification flows (includes Uddoktapay webhook/verify endpoints).",
        "files": [
          "app/api/payment/create-charge/route.ts",
          "app/api/payment/verify-payment/route.ts",
          "app/api/payment/verify-transaction/route.ts",
          "app/api/payment/webhook/route.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Payments API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/payment/create-charge": {
              "post": {
                "summary": "Create charge"
              }
            },
            "/api/payment/verify-payment": {
              "post": {
                "summary": "Verify payment"
              }
            },
            "/api/payment/webhook": {
              "post": {
                "summary": "Webhook receiver"
              }
            }
          }
        }
      }
    ]
  }
}
